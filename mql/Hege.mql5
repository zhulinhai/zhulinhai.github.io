//+------------------------------------------------------------------+
//|                                                          Hege.mql5 |
//|                                                    黄金对冲策略 V1 |
//+------------------------------------------------------------------+
#property copyright "Your Name"
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

// 输入参数
input double LotSize = 0.05;         // 交易手数 (建议黄金使用小仓位)
input int StopLoss = 300;            // 止损点数 (黄金波动大，止损要宽)
input int TakeProfit = 500;          // 获利点数
input double MinSpread = 35;         // 最大允许点差
input int Magic = 888888;            // EA魔术数字
input bool UseTrailingStop = true;   // 使用移动止损
input int TrailingStop = 200;        // 移动止损点数
input int TrailingStep = 50;         // 移动止损步长

// 全局变量
int buyTicket = 0;
int sellTicket = 0;
datetime lastTradeTime = 0;
bool isTradeAllowed = false;

//+------------------------------------------------------------------+
//| Expert initialization function                                     |
//+------------------------------------------------------------------+
int OnInit()
{
    // 检查是否是XAUUSD
    if(_Symbol != "XAUUSD")
    {
        Print("错误：此EA只能在XAUUSD上使用！");
        return INIT_FAILED;
    }
    
    Print("黄金对冲策略初始化成功");
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                              |
//+------------------------------------------------------------------+
void OnTick()
{
    // 检查交易条件
    if(!IsTradeAllowed()) return;
    
    // 获取当前点差
    double currentSpread = SymbolInfoInteger(_Symbol, SYMBOL_SPREAD);
    if(currentSpread > MinSpread)
    {
        Print("当前点差过大: ", currentSpread);
        return;
    }
    
    // 检查是否已有持仓
    if(buyTicket == 0 && sellTicket == 0)
    {
        if(IsNewBar()) // 在新K线开始时开仓
        {
            OpenHedgePositions();
        }
    }
    else
    {
        // 管理现有持仓
        ManagePositions();
    }
}

//+------------------------------------------------------------------+
//| 开立对冲持仓                                                       |
//+------------------------------------------------------------------+
void OpenHedgePositions()
{
    double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
    double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    
    // 计算止损价格
    double buyStopLoss = ask - StopLoss * _Point;
    double buyTakeProfit = ask + TakeProfit * _Point;
    double sellStopLoss = bid + StopLoss * _Point;
    double sellTakeProfit = bid - TakeProfit * _Point;
    
    // 创建交易请求
    MqlTradeRequest request;
    MqlTradeResult result;
    
    // 开多单
    request.action = TRADE_ACTION_DEAL;
    request.symbol = _Symbol;
    request.volume = LotSize;
    request.type = ORDER_TYPE_BUY;
    request.price = ask;
    request.sl = buyStopLoss;
    request.tp = buyTakeProfit;
    request.deviation = 3;
    request.magic = Magic;
    request.comment = "Gold Hedge Buy";
    OrderSend(request, result);
    buyTicket = result.order;
    
    // 开空单
    request.type = ORDER_TYPE_SELL;
    request.price = bid;
    request.sl = sellStopLoss;
    request.tp = sellTakeProfit;
    request.comment = "Gold Hedge Sell";
    OrderSend(request, result);
    sellTicket = result.order;
    
    if(buyTicket < 0 || sellTicket < 0)
    {
        Print("开仓失败! 错误代码: ", GetLastError());
        // 如果其中一单开仓失败，关闭另一单
        if(buyTicket > 0) CloseOrder(buyTicket);
        if(sellTicket > 0) CloseOrder(sellTicket);
        buyTicket = 0;
        sellTicket = 0;
    }
}

//+------------------------------------------------------------------+
//| 关闭订单                                                          |
//+------------------------------------------------------------------+
void CloseOrder(int ticket)
{
    MqlTradeRequest request;
    MqlTradeResult result;
    
    request.action = TRADE_ACTION_DEAL;
    request.order = ticket;
    request.symbol = _Symbol;
    request.volume = LotSize;
    request.type = ORDER_TYPE_SELL; // 假设是卖出以关闭买单，反之亦然
    OrderSend(request, result);
}

//+------------------------------------------------------------------+
//| 管理持仓                                                           |
//+------------------------------------------------------------------+
void ManagePositions()
{
    if(!UseTrailingStop) return;
    
    for(int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if(OrderSelect(i, SELECT_BY_POS))
        {
            if(OrderMagicNumber() == Magic)
            {
                // 移动止损逻辑
                if(OrderType() == OP_BUY)
                {
                    double newStopLoss = NormalizeDouble(SymbolInfoDouble(_Symbol, SYMBOL_BID) - TrailingStop * _Point, _Digits);
                    if(newStopLoss > OrderStopLoss() + TrailingStep * _Point)
                    {
                        OrderModify(OrderTicket(), OrderOpenPrice(), newStopLoss, OrderTakeProfit(), 0);
                    }
                }
                else if(OrderType() == OP_SELL)
                {
                    double newStopLoss = NormalizeDouble(SymbolInfoDouble(_Symbol, SYMBOL_ASK) + TrailingStop * _Point, _Digits);
                    if(newStopLoss < OrderStopLoss() - TrailingStep * _Point)
                    {
                        OrderModify(OrderTicket(), OrderOpenPrice(), newStopLoss, OrderTakeProfit(), 0);
                    }
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//| 检查是否是新K线                                                    |
//+------------------------------------------------------------------+
bool IsNewBar()
{
    static datetime lastBar = 0;
    datetime currentBar = iTime(_Symbol, PERIOD_CURRENT, 0);
    
    if(lastBar != currentBar)
    {
        lastBar = currentBar;
        return true;
    }
    return false;
}

//+------------------------------------------------------------------+
//| 检查交易条件                                                       |
//+------------------------------------------------------------------+
bool IsTradeAllowed()
{
    if(!IsTradeAllowed()) return false;
    if(!IsExpertEnabled()) return false;
    if(IsTradeContextBusy()) return false;
    
    return true;
}
